name: Auto deploy to NCP
run-name: Running
on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setting secret
      run: mkdir -p src/main/resources
        echo "${{ secrets.APPLICATION_SECRET_YML }}" | base64 --decode > src/main/resources/application-secret.yml
        find src
      shell: bash

    # Gradle 권한 부여
    - name: Grant permission for gradlew
      run: chmod +x ./gradlew

    # Test 없이 빌드
    - name: Build with Gradle
      run: ./gradlew clean build -x test

    # 빌드한 jar 파일을 도커 이미지로 빌드하고 도커 허브에 푸시
    - name: web docker build and push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_REPO }}/future-docker .
        docker push ${{ secrets.DOCKER_REPO }}/future-docker

  deploy:
    # needs를 통해 build job이 수행 성공시에 작업되도록 설정
    needs: build
    runs-on: ubuntu-latest

    steps:
      # NCP 로그인 / docker image pull & run
      - name: NCP login and docker image pull and run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USERNAME }}
          password: ${{ secrets.NCP_PASSWORD }}
          port: ${{ secrets.NCP_PORT }}
          script: |
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker stop $(sudo docker ps -a -q) || true
            sudo docker rm -f $(sudo docker ps -a -q) || true
            sudo docker pull ${{ secrets.DOCKER_REPO }}/future-docker
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_REPO }}/future-docker
            sudo docker image prune -f
